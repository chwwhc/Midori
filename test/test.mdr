#include "E:\Projects\Midori\MidoriUtil\MidoriUtil.mdr"

fixed TestPrimeNumbers = fn() : Unit
{
	fixed IsPrime = fn(fixed n : Int) : Bool
	{
		if (n <= 1)
		{
			return false;
		}

		for (var i = 2; i * i <= n; i = i + 1)
		{
			if (n % i == 0)
			{
				return false;
			}
		}
		return true;
	};

	fixed start = GetTime();

	var prime_count = 0;
	for (var i = 0; i < 100000; i = i + 1)
	{
		if (IsPrime(i))
		{
			prime_count = prime_count + 1;
		}
	}

	fixed end = GetTime();

	PrintLine("Prime(100000) benchmark took " ++ ((end - start) as Text) ++ " milliseconds");

	return ();
};

fixed TestFib = fn() : Unit
{

	fixed fib = fn(fixed n : Int) : Int
	{
		if (n <= 1) return n;
		return fib(n - 1) + fib(n - 2);
	};

	fixed start = GetTime();

	fixed fib_35 = fib(35);

	fixed end = GetTime();

	PrintLine("Fibonacci(35) benchmark took " ++ ((end - start) as Text) ++ " milliseconds");

	return ();
};

fixed TestStringManipulation = fn() : Unit
{
    fixed start = GetTime();

    var testString = "";
    for (var i = 0; i < 10000; i = i + 1)
    {
        testString = testString ++ "a";
    }

    fixed end = GetTime();

    PrintLine("String manipulation benchmark took " ++ ((end - start) as Text) ++ " milliseconds");
    
    return ();
};

fixed TestParenthesisGeneration = fn(fixed max_len : Int) : Unit
{
    var output : Array of Text = [];
    fixed BackTrack = fn(fixed len : Int, fixed left : Int, fixed right : Int, fixed acc : Text) : Unit
    {   
        if (left < right)
        {
            return ();
        }
        if (left > len || right > len)
        {
            return ();
        }
        if (left == len && right == len)
        {
            output = output ++ [acc];
            return ();
        }

        BackTrack(len, left + 1, right, acc ++ "(");
        BackTrack(len, left, right + 1, acc ++ ")");
        return ();
    };

    fixed start = GetTime();

    BackTrack(max_len, 0, 0, "");

    fixed end = GetTime();

    PrintLine("Parenthesis generation benchmark took " ++ ((end - start) as Text) ++ " milliseconds");

    return ();
};

fixed main = fn() : Unit
{
	TestFib();
	TestPrimeNumbers();
	TestStringManipulation();
	TestParenthesisGeneration(8);

	return ();
};