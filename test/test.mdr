#include "E:\Projects\Midori\MidoriUtil\MidoriUtil.mdr"
#include "E:\Projects\Midori\\test\\test2.mdr"
#include "E:\Projects\Midori\\test\struct\\nested_struct.mdr"

struct Complex
{
	real : Frac;
	img : Frac;
};

struct Vec3
{
	x : Frac;
	y : Frac;
	z : Frac;
};

fixed main = fn() : Unit
{
	struct NestedStruct
	{
		x : Int;
	};

	var ns = new NestedStruct(1);

	fixed fib = fn(fixed x : Int) : Int
	{
		return x < 2 ? x : fib(x - 1) + fib(x - 2);
	};

	fixed factorial = fn(fixed x : Frac) : Frac
	{
		return x <= 1.0 ? 1.0 : factorial(x - 1.0) * x;
	};

	fixed dot_product = fn(fixed n : Int, fixed a : Array<Frac>, fixed b : Array<Frac>) : Frac
	{
		var output = 0.0;

		for (var i = 0; i < n; i = i + 1)
		{
			output = output + a[i] * b[i];
		}

		return output;
	};

	fixed cross_product = fn(fixed a : Vec3, fixed b : Vec3) : Vec3
	{
		return new Vec3(a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
	};

	for (var i = 0; i < 10; i = i + 1)
	{
		fn() : Unit
		{
			return Print("Hello, world!\n");
		}();
	}

	var arr : Array<Array<Frac>> = [];
	arr = arr ++ [[9.0]] ++ [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
	PrintLine(arr as Text);

	Print("Calculate the 35th Fibonacci number: ");
	PrintLine(fib(35) as Text);

	fixed complex = new Complex(1.1, 2.2);
	Print("I just created a complex number: ");
	PrintLine(complex as Text);

	Print("Calculate dot product: ");
	PrintLine(dot_product(3, [1.0, 2.0, 3.0], [1.0, 2.0, 3.0]) as Text);

	Print("Calculate cross product: ");
	PrintLine(cross_product(new Vec3(1.3123, 22.312, -323.023), new Vec3(123.0, 222.1203, -93.02)) as Text);


	TestNestedStruct();
	TestFib();
	return ();
};