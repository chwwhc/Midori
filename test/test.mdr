foreign Print : (Text) -> Unit;

fixed PrintLine := closure(fixed val : Text) : Unit
{
	Print(val);
	Print("\n");
	return #;
};

struct Complex
{
	real : Fraction;
	img : Fraction;
}

fixed main := closure() : Unit
{
	fixed fib := closure(fixed x : Integer) : Integer
	{
		return x < 2 ? x : fib(x - 1) + fib(x - 2);
	};

	fixed factorial := closure(fixed x : Fraction) : Fraction
	{
		return x <= 1.0 ? 1.0 : factorial(x - 1.0) * x;
	};

	fixed dot_product := closure(fixed n : Integer, fixed a : Array<Fraction>, fixed b : Array<Fraction>) : Fraction
	{
		var output := 0.0;

		for (var i := 0; i < n; i = i + 1)
		{
			output = output + a[i] * b[i];
		}

		return output;
	};

	var arr : Array<Array<Fraction>> := [];
	arr = arr ++ [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]];
	PrintLine(arr as Text);

	Print("Calculate the 35th Fibonacci number: ");
	PrintLine(fib(35) as Text);

	fixed complex := new Complex(1.1, 2.2);
	Print("I just created a complex number: ");
	PrintLine(complex as Text);

	Print("Calculate dot product: ");
	PrintLine(dot_product(3, [1.0, 2.0, 3.0], [1.0, 2.0, 3.0]) as Text);

	return #;
};