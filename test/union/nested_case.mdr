#include "E:\Projects\Midori\MidoriPrelude\IO.mdr"
struct S1
{
};

union U1
{
	A(Int),
	B,
	C(Frac, Int, Text),
	D(U1),
	E(S1),
};

var main = fn() : Unit
{
	var z = new U1::D(new U1::D(new U1::E(new S1())));

	union Inner
	{
		A,
		B(U1)
	};

	fixed zz = new Inner::A();

	switch(z)
	{
		case U1::D(var u):
		{
			IO::PrintLine("1 Nested D case");

			switch(u)
			{
				case U1::D(var uu):
				{
					IO::PrintLine("2 Nested D case");

					switch(uu)
					{
						case U1::B():
						{}
						default:
							IO::PrintLine("3 Nested default case");
					}
				}
				default:
				{
					IO::PrintLine("Default case");
				}
			}
		}
		default:
			IO::PrintLine("default case");
	}

	return ();
};